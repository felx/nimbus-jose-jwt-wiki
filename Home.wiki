= Nimbus JOSE+JWT =

Nimbus JOSE+JWT is an open source (Apache 2.0) Java library that implements the **Javascript Object Signing and Encryption (JOSE)** spec suite and the closely related **JSON Web Token (JWT)** spec. 

== Supported JOSE and JWT objects ==

The library supports creating, querying, serialising and parsing of the following JOSE and JWT objects:

	* Plain (unsecured) JOSE objects.
	
	* JSON Web Signature (JWS) objects.
	
	* JSON Web Encryption (JWE) objects.
	
	* JSON Web Key (JWK) objects and JSON Web Key (JWK) Sets.
	
	* Plain, signed and encrypted JSON Web Tokens (JWTs).

== Fully decoupled JOSE/JWT object representation from crypto algorithm implementation ==

The JOSE and JWT object representation is completely decoupled from JSON Web Algorithm (JWA) implementations through a set of simple interfaces for signing, verifying, encrypting and decrypting the objects. Developers can use the standard algorithm implementations or plug their own.


== All standard JWS and JWE RSA-based algorithms fully implemented ==

The library currently ships a ready implementation of the following standard 
algorithms:

	* HMAC integrity with HS256, HS384 and HS512.
	
	* RSASSA-PKCS1-V1_5 signatures with RS256, RS384 and RS512.

	* RSASSA-PSS signatures with PS256, PS384 and PS512.
	
	* EC signatures with ES256, ES384 and ES512.

        * RSAES-PKCS1-V1_5 encryption with A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM and A256GCM.

        * RSAES OAEP encryption with A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM and A256GCM.

        * Direct shared symmetric key encryption with A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM and A256GCM.

        * JWE Compression with DEFLATE.

AES Key Wray and ECDH-ES encryption is on the roadmap, you're welcome to contribute in their development.

== Example JWS object - sign and verify ==

{{{
#!java
// Create JWS payload
Payload payload = new Payload("Hello world!");
                
// Create JWS header with HS256 algorithm
JWSHeader header = new JWSHeader(JWSAlgorithm.HS256);
header.setContentType("text/plain");
                
// Create JWS object
JWSObject jwsObject = new JWSObject(header, payload);
                
// Create HMAC signer
String sharedKey = "a0a2abd8-6162-41c3-83d6-1cf559b46afc";
                
JWSSigner signer = new MACSigner(sharedKey.getBytes());
jwsObject.sign(signer);
                        
// Serialise JWS object to compact format
String s = jwsObject.serialize();
System.out.println("Serialised JWS object: " + s);
                
// Parse back and check signature
jwsObject = JWSObject.parse(s);

JWSVerifier verifier = new MACVerifier(sharedKey.getBytes());
                
boolean verifiedSignature = jwsObject.verify(verifier);

if (verifiedSignature)
    System.out.println("Verified JWS signature!");
else
    System.out.println("Bad JWS signature!");

System.out.println("Recovered payload message: " + jwsObject.getPayload());
}}}


== Example encrypted JWT - encrypt and decrypt ==

Check out //src/test/java/com/nimbusds/jwt/EncryptedJWTTest.java// for the complete code.

{{{
#!java
// Compose the JWT claims set
JWTClaimsSet jwtClaims = new JWTClaimsSet();
jwtClaims.setIssuer("https://openid.net");
jwtClaims.setSubject("alice");
List<String> aud = new ArrayList<String>();
aud.add("https://app-one.com");
aud.add("https://app-two.com");
jwtClaims.setAudience(aud);
// Set expiration in 10 minutes
jwtClaims.setExpirationTime(new Date(new Date().getTime() + 1000*60*10));
jwtClaims.setNotBeforeTime(new Date());
jwtClaims.setIssueTime(new Date());
jwtClaims.setJWTID(UUID.randomUUID().toString());

System.out.println(jwtClaims.toJSONObject());
// Produces 
// { 
//   "iss" : "https:\/\/openid.net",
//   "sub" : "alice",
//   "aud" : [ "https:\/\/app-one.com" , "https:\/\/app-two.com" ],
//   "exp" : 1364293137871,
//   "nbf" : 1364292537871,
//   "iat" : 1364292537871,
//   "jti" : "165a7bab-de06-4695-a2dd-9d8d6b40e443"
// }

// Request JWT encrypted with RSA-OAEP and 128-bit AES/GCM
JWEHeader header = new JWEHeader(JWEAlgorithm.RSA_OAEP, EncryptionMethod.A128GCM);

// Create the encrypted JWT object
EncryptedJWT jwt = new EncryptedJWT(header, jwtClaims);

// Create an encrypter with the specified public RSA key
RSAEncrypter encrypter = new RSAEncrypter(publicKey);

// Do the actual encryption
jwt.encrypt(encrypter);

// Serialise to JWT compact form
String jwtString = jwt.serialize();

System.out.println(jwtString);
// Produces 
//
// eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkExMjhHQ00ifQ.K52jFwAQJH-
// DxMhtaq7sg5tMuot_mT5dm1DR_01wj6ZUQQhJFO02vPI44W5nDjC5C_v4p
// W1UiJa3cwb5y2Rd9kSvb0ZxAqGX9c4Z4zouRU57729ML3V05UArUhck9Zv
// ssfkDW1VclingL8LfagRUs2z95UkwhiZyaKpmrgqpKX8azQFGNLBvEjXnx
// -xoDFZIYwHOno290HOpig3aUsDxhsioweiXbeLXxLeRsivaLwUWRUZfHRC
// _HGAo8KSF4gQZmeJtRgai5mz6qgbVkg7jPQyZFtM5_ul0UKHE2y0AtWm8I
// zDE_rbAV14OCRZJ6n38X5urVFFE5sdphdGsNlA.gjI_RIFWZXJwaO9R.oa
// E5a-z0N1MW9FBkhKeKeFa5e7hxVXOuANZsNmBYYT8G_xlXkMD0nz4fIaGt
// uWd3t9Xp-kufvvfD-xOnAs2SBX_Y1kYGPto4mibBjIrXQEjDsKyKwndxzr
// utN9csmFwqWhx1sLHMpJkgsnfLTi9yWBPKH5Krx23IhoDGoSfqOquuhxn0
// y0WkuqH1R3z-fluUs6sxx9qx6NFVS1NRQ-LVn9sWT5yx8m9AQ_ng8MBWz2
// BfBTV0tjliV74ogNDikNXTAkD9rsWFV0IX4IpA.sOLijuVySaKI-FYUaBy
// wpg


// Parse back
jwt = EncryptedJWT.parse(jwtString);

// Create a decrypter with the specified private RSA key
RSADecrypter decrypter = new RSADecrypter(privateKey);

// Decrypt
jwt.decrypt(decrypter);

// Retrieve JWT claims
System.out.println(jwt.getJWTClaimsSet().getIssuer());;
System.out.println(jwt.getJWTClaimsSet().getSubject());
System.out.println(jwt.getJWTClaimsSet().getAudience().size());
System.out.println(jwt.getJWTClaimsSet().getExpirationTime());
System.out.println(jwt.getJWTClaimsSet().getNotBeforeTime());
System.out.println(jwt.getJWTClaimsSet().getIssueTime());
System.out.println(jwt.getJWTClaimsSet().getJWTID());
}}}

== Additional examples ==

Create, sign and verify JSON Web Signature (JWS) objects:

JWS with any payload:

* [[JWS with HMAC protection]]
* [[JWS with RSA signature]]
* [[JWS with EC signature]]

Signed JSON Web Token (JWT):

* [[JWT with HMAC protection]]
* [[JWT with RSA signature]]
* [[JWT with EC signature]]

== JavaDocs are your friend ==

The library code comes with complete JavaDocs which can help you discover and make use of many special features. The JavaDocs are included in the download package. You can also browse them online.

    http://nimbusds.com/files/jose-jwt/javadoc/

== Related IETF drafts ==

        * [JWA] draft-ietf-jose-json-web-algorithms-18

        * [JWS] draft-ietf-jose-json-web-signature-18

        * [JWE] draft-ietf-jose-json-web-encryption-18

        * [JWK] draft-ietf-jose-json-web-key-18

        * [JWT] draft-ietf-oauth-json-web-token-13


== Dependencies ==

The Nimbus JOSE+JWT library has minimal dependencies.

        * Apache Commons Codec for Base64 and Base64URL encoding and decoding.

        * javax.mail for MIME type handling.

        * JSON Smart for highly efficient parsing and serialisation of JSON.

        * JCIP for concurrency annotations.

        * [optional] The BouncyCastle.org cryptography provider for Java, for 
          ECDSA signing and verification.

For Maven add:
{{{
#!xml
<dependency>
    <groupId>com.nimbusds</groupId>
    <artifactId>nimbus-jose-jwt</artifactId>
    <version>2.22</version>
</dependency>
}}}


== Uses ==

        * JWT bearer tokens in OAuth 2.0
        
        * OpenID Connect
        
        * XMPP


== JWK generator ==

A generator for symmetric and RSA - based JSON Web Keys (JWKs), including a command-line utility, is available at 

https://github.com/mitreid-connect/json-web-key-generator


== Licensing ==

The library source code is provided under the Apache 2.0 licence.


== About us ==

The principal maintainer of this library is Nimbus Directory Services 
[http://NimbusDS.com]. The initial code was based on JWS/JWE/JWT crypto classes
factored out of the OpenInfoCard project. A rewrite to fully decouple JOSE + JWT
object representation from crypto algorithm implementation led to the next major 
2.0 release in October 2012.

The library has received numerous contributions and is now on the way to have all standard JWAs fully implemented. You're welcome to join us if you wish to help out with that.


== Acknowledgements ==

        * Axel Nennker and the guys behind OpenInfoCard for providing much of the initial code.
        * Justin Richer from MITRE for handling releases to Maven Central, JPSK support, numerous improvements, fixes and suggestions.
        * Ville Kurkinen for adding initial Maven support.
        * David Ortiz for initiating RSA encryption development.
        * Juraj Somorovsky for security related reviews, improvements and suggestions.
        * Lai Xin Chu for initial work on JWE.
        * Wisgary Torres from the Microsoft Xbox team for important feedback and bug reports.
        * CertiVox UK for supporting the library development.
        * Everyone on the JOSE IETF WG.
        * NimbusDS QA.
        * Countless other contributors of bug reports, fixes and suggestions.

== To post bug reports and suggestions ==

        https://bitbucket.org/nimbusds/nimbus-jose-jwt/issues


== Follow us on Twitter ==
        
        https://twitter.com/NimbusDS